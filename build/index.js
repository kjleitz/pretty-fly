!function(t){var e={};function i(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(s,o,function(e){return t[e]}.bind(null,o));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=document.createElement("canvas"),o=()=>{s.width=window.innerWidth,s.height=window.innerHeight};o(),window.addEventListener("resize",o),document.body.appendChild(s);const n=s.getContext("2d");n||console.error("Canvas '2d' context is not supported.");let r=0;const h=(t,e)=>{requestAnimationFrame(()=>h(t,e)),t.clearRect(0,0,window.innerWidth,window.innerHeight),e(r),r+=1};var l=h;const a=(t,e)=>{const[i,s]=t<e?[t,e]:[e,t],o=s-i;return i+Math.random()*o};function c(t,...e){const i="number"==typeof e[0]?e[0]:0,s="function"==typeof e[0]?e[0]:e[1],[o,n]=t<i?[t,i]:[i,t];return[...Array(n-o).keys()].map(t=>s?s(t+o):t+o)}const u=(t,e,i=0)=>{if(t===i)return i;if(t>i){const s=t-e;return s<i?i:s}const s=t+e;return s>i?i:s},d=(t,e,i)=>{const[s,o]=e<i?[e,i]:[i,e];return t<s?s:t>o?o:t},g=(t,e,i,s=!0)=>{const[o,n]=e<i?[e,i]:[i,e];return s?t>=o&&t<=n:t>o&&t<n},f=(t,e)=>Math.abs(t-e),p=0,y=1,m=.25,w=100;var b=new class{constructor(){this.masses=[]}collisionsForMove(t,e){const i=new v(Object.assign(Object.assign(Object.assign({},t),e),{darkMatter:!0})),s=i.x-t.x,o=i.y-t.y,n=o<0,r=o>0,h=s<0,l=s>0;return this.masses.reduce((e,s)=>{if(s===t)return e;if(!i.isHitting(s))return e;const o=s.solid?e.solid:e.ephemeral;if(n&&g(s.bottom,t.top,i.top)){const t=f(s.bottom,i.top);o.top<t&&(o.top=t)}if(r&&g(s.top,t.bottom,i.bottom)){const t=f(s.top,i.bottom);o.bottom<t&&(o.bottom=t)}if(h&&g(s.right,t.left,i.left)){const t=f(s.right,i.left);o.left<t&&(o.left=t)}if(l&&g(s.left,t.right,i.right)){const t=f(s.left,i.right);o.right<t&&(o.right=t)}return e},{solid:{top:0,bottom:0,left:0,right:0},ephemeral:{top:0,bottom:0,left:0,right:0}})}overlappingMasses(t,{ignore:e=[]}={}){return this.masses.filter(i=>t!==i&&!e.includes(i)&&t.isHitting(i))}overlap(t,{ignore:e=[]}={}){return this.overlappingMasses(t,{ignore:e}).reduce((e,i)=>{const s=e;if(i.top>=t.top&&i.top<=t.bottom){const e=t.bottom-i.top;s.bottom<e&&(s.bottom=e)}if(i.bottom<=t.bottom&&i.bottom>=t.top){const e=i.bottom-t.top;s.top<e&&(s.top=e)}if(i.left>=t.left&&i.left<=t.right){const e=t.right-i.left;s.right<e&&(s.right=e)}if(i.right>=t.left&&i.right<=t.right){const e=i.right-t.left;s.left<e&&(s.left=e)}return s},{top:0,right:0,bottom:0,left:0})}};const x=(t,e,i,s,o)=>{let n=t+e,r=e+i;return n>o?(n=o,r=0):n<s&&(n=s,r=0),{position:n,velocity:r}};class v{constructor(t){this.mass=1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.width=25,this.height=25,this.stationary=!1,this.darkMatter=!1,this.solid=!0,this.collectOnTouch=!1,this.touchedAt=null,Object.assign(this,t),this.darkMatter||b.masses.push(this)}get dragCoefficient(){return(2*this.width+2*this.height)/this.mass/w}get ax(){return this.stationary?0:p}get ay(){return this.stationary?0:y}get isAgainstTopWall(){return 0===this.y}get isAgainstBottomWall(){return this.y===window.innerHeight-this.height}get isAgainstLeftWall(){return 0===this.x}get isAgainstRightWall(){return this.x===window.innerWidth-this.width}get terminalVelocity(){return 20}get top(){return this.y}get right(){return this.x+this.width}get bottom(){return this.y+this.height}get left(){return this.x}update(){const t=x(this.x,this.dx,this.ax,this.width,window.innerWidth-this.width),e=x(this.y,this.dy,this.ay,this.height,window.innerHeight-this.height);let i=t.position,s=e.position,o=t.velocity,n=e.velocity;const r=b.collisionsForMove(this,{x:i,y:s}).solid;r.right>0?(i-=r.right,o=0):r.left>0&&(i+=r.left,o=0),r.bottom>0?(s-=r.bottom,n=0):r.top>0&&(s+=r.top,n=0),this.x=i,this.y=s,(this.isAgainstTopWall||this.isAgainstBottomWall||r.top||r.bottom)&&(o=u(o,m)),(this.isAgainstLeftWall||this.isAgainstRightWall||r.left||r.right)&&(n=u(n,m)),this.dx=d(o,-1*this.terminalVelocity,this.terminalVelocity),this.dy=d(n,-1*this.terminalVelocity,this.terminalVelocity)}isHitting(t){return this.right>=t.left&&this.left<=t.right&&this.bottom>=t.top&&this.top<=t.bottom}}var E=new class{constructor(){this.x=0,this.y=0,this.pressed=!1,window.addEventListener("mousedown",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mousemove",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mouseup",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("touchstart",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchmove",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchend",t=>{this.populateFromTouchEvent(t)})}populateFromMouseEvent(t){this.x=t.x,this.y=t.y,this.pressed=1===t.buttons}populateFromTouchEvent(t){const{touches:e}=t;if(0===e.length)this.pressed=!1;else{const t=e[0];this.x=t.clientX,this.y=t.clientY,this.pressed=!0}}};class M extends v{constructor(){super(...arguments),this.width=15,this.height=20,this.jetpackForceX=.4,this.jetpackForceY=1.3,this.MAX_FUEL=100,this.MIN_FUEL=0,this.MAX_FUEL_RECHARGE=25,this.fuelRechargeRate=.1,this.fuelRechargeDelay=200,this.lastBurn=null,this._fuel=100}get burning(){return this.fuel>0&&E.pressed}get axJetpack(){if(!this.burning)return 0;const t=E.x-this.x,e=-1*this.width,i=2*this.width;if(g(t,e,i))return 0;const s=this.jetpackForceX/this.mass;return t>0?s:-1*s}get ayJetpack(){if(!this.burning)return 0;const t=E.y-this.y,e=this.height;return t>=0||g(t,0,e)?0:-1*(this.jetpackForceY/this.mass)}get ax(){return super.ax+this.axJetpack}get ay(){return super.ay+this.ayJetpack}get burnerXSide(){return 0===this.axJetpack?"none":this.axJetpack>0?"left":"right"}get burnerYSide(){return 0===this.ayJetpack?"none":this.ayJetpack>0?"top":"bottom"}set fuel(t){this._fuel=d(t,this.MIN_FUEL,this.MAX_FUEL)}get fuel(){return this._fuel}update(){super.update(),this.burning?(this.fuel-=.5,this.lastBurn=new Date):this.fuel<this.MAX_FUEL_RECHARGE&&this.lastBurn&&(new Date).getTime()-this.lastBurn.getTime()>this.fuelRechargeDelay&&(this.fuel=d(this.fuel+this.fuelRechargeRate,this.MIN_FUEL,this.MAX_FUEL))}}class F{constructor(t,e,{size:i,brightness:s,vector:o}={}){this.x=t,this.y=e,this.size=i||a(1,5);const n=void 0===s?Math.random():s;this.brightness=d(n,0,1),this.vector=o||[-1,1]}}window.addEventListener("DOMContentLoaded",()=>{const t=window.innerWidth,e=window.innerHeight,i=new M,s=c(10).map(()=>new v({x:a(0,t),y:a(0,e),width:a(50,150),height:a(50,150),stationary:!0})),o=c(10).map(()=>new v({mass:a(.5,5),x:a(0,t),y:a(0,e),width:25,height:25,solid:!1,stationary:!1,collectOnTouch:!0})),r=[...s,...o],h=[i,...r.filter(t=>!t.stationary)];let u=0;const d=o.length,g=c(100,()=>new F(a(0,t),a(0,e))),f=[];setInterval(()=>{const[i,s]=Math.random()>.5?[a(250,t),0]:[t,a(0,e-250)];f.push(new F(i,s,{brightness:1,vector:[-10,10]}))},2e3),l(n,s=>{g.forEach((i,o)=>{const{x:r,y:h,size:l,brightness:c,vector:u}=i,d=c-Math.random();if(n.fillStyle=`rgba(255, 255, 255, ${(s+o)%20==0?d:c})`,n.fillRect(r,h,l,l),i.x+=u[0],i.y+=u[1],i.x<0||i.x>t||i.y<0||i.y>e){const[s,o]=Math.random()>.5?[a(0,t),0]:[t,a(0,e)];i.x=s,i.y=o}}),f.forEach((i,s)=>{const{x:o,y:r,size:h,brightness:l,vector:a}=i;n.fillStyle=`rgba(255, 255, 255, ${l})`,n.fillRect(o,r,h,h),i.x+=a[0],i.y+=a[1],(i.x<0||i.x>t||i.y<0||i.y>e)&&f.splice(s,1)}),r.forEach((t,e)=>{const s=i.isHitting(t);let o=!0;if(t.solid)n.fillStyle="rgba(255, 0, 0, 0.7)";else if(s&&!t.touchedAt)n.fillStyle="rgba(0, 0, 255, 0.8)",t.touchedAt=(new Date).getTime(),i.fuel+=.25*i.MAX_FUEL;else if(t.collectOnTouch&&t.touchedAt){const i=(new Date).getTime()-t.touchedAt;if(i>200)r.splice(e,1),o=!1,u+=1;else{const t=Math.ceil(i/200*255);n.fillStyle=`rgba(${t}, ${t}, 255, 0.8)`}}else n.fillStyle="rgba(0, 100, 255, 0.8)";o&&n.fillRect(t.x,t.y,t.width,t.height)}),n.fillStyle="rgba(0, 150, 0, 1)",n.fillRect(i.x,i.y,i.width,i.height);const o=i.width/2,l=i.height/5;switch(n.fillStyle="rgba(220, 220, 255, 1)",i.burnerXSide){case"left":n.fillRect(i.x+(i.width-o),i.y+3,o,l);break;case"right":n.fillRect(i.x,i.y+3,o,l);break;default:n.fillRect(i.x+(i.width-o)/2,i.y+3,o,l)}const c=`rgba(255, 100, 0, ${a(.5,.75)})`,p=a(.25,.4)*i.width,y=a(.4,.6)*i.height,m=t=>.6*t,w=t=>(t-m(t))/2;switch(n.fillStyle=c,i.burnerXSide){case"left":n.fillRect(i.x-p,i.y+w(i.height),p,m(i.height));break;case"right":n.fillRect(i.x+i.width,i.y+w(i.height),p,m(i.height))}switch(i.burnerYSide){case"bottom":n.fillRect(i.x+w(i.width),i.y+i.height,m(i.width),y);break;case"top":n.fillRect(i.x+w(i.width),i.y-y,m(i.width),y)}n.font="30px Courier",n.fillStyle="#FFF";const b=`${u}/${d}${u===d?" aww yee":""}`;n.fillText(b,50,50);const x=i.fuel/i.MAX_FUEL,v=300*x,E=x<.25&&s%20>10;n.fillStyle=E?"rgba(255, 0, 0, 0.6)":"rgba(255, 0, 0, 0.3)",n.fillRect(50+v,60,300-v,30),n.fillStyle="rgba(0, 255, 0, 0.5)",n.fillRect(50,60,v,30),h.forEach(t=>t.update())})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,