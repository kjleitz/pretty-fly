!function(t){var e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(r,s,function(e){return t[e]}.bind(null,s));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const r=document.createElement("canvas"),s=()=>{r.width=window.innerWidth,r.height=window.innerHeight};s(),window.addEventListener("resize",s),document.body.appendChild(r);const o=r.getContext("2d");o||console.error("Canvas '2d' context is not supported.");const n=(t,e)=>{requestAnimationFrame(()=>n(t,e)),t.clearRect(0,0,window.innerWidth,window.innerHeight),e()};var h=n;const a=(t,e)=>{const[i,r]=t<e?[t,e]:[e,t],s=r-i;return i+Math.random()*s},l=(t,e)=>{e||(e=t,t=0);const[i,r]=t<e?[t,e]:[e,t],s=[...Array(r-i).keys()].map(t=>t+i);return e>=t?s:[r,...s.slice(1).reverse()]},c=(t,e,i=0)=>{if(t===i)return i;if(t>i){const r=t-e;return r<i?i:r}const r=t+e;return r>i?i:r},u=(t,e,i)=>{const[r,s]=e<i?[e,i]:[i,e];return t<r?r:t>s?s:t},d=(t,e,i,r=!0)=>{const[s,o]=e<i?[e,i]:[i,e];return r?t>=s&&t<=o:t>s&&t<o},g=(t,e)=>Math.abs(t-e),p=0,f=1,w=.25,y=100;var m=new class{constructor(){this.masses=[]}overlapForMove(t,e){const i=new x(Object.assign(Object.assign(Object.assign({},t),e),{darkMatter:!0})),r=i.x-t.x,s=i.y-t.y,o=s<0,n=s>0,h=r<0,a=r>0;return this.masses.reduce((e,r)=>{if(r===t)return e;if(!i.isHitting(r))return e;if(o&&d(r.bottom,t.top,i.top)){const t=g(r.bottom,i.top);e.top<t&&(e.top=t)}if(n&&d(r.top,t.bottom,i.bottom)){const t=g(r.top,i.bottom);e.bottom<t&&(e.bottom=t)}if(h&&d(r.right,t.left,i.left)){const t=g(r.right,i.left);e.left<t&&(e.left=t)}if(a&&d(r.left,t.right,i.right)){const t=g(r.left,i.right);e.right<t&&(e.right=t)}return e},{top:0,bottom:0,left:0,right:0})}overlappingMasses(t,{ignore:e=[]}={}){return this.masses.filter(i=>t!==i&&!e.includes(i)&&t.isHitting(i))}overlap(t,{ignore:e=[]}={}){return this.overlappingMasses(t,{ignore:e}).reduce((e,i)=>{const r=e;if(i.top>=t.top&&i.top<=t.bottom){const e=t.bottom-i.top;r.bottom<e&&(r.bottom=e)}if(i.bottom<=t.bottom&&i.bottom>=t.top){const e=i.bottom-t.top;r.top<e&&(r.top=e)}if(i.left>=t.left&&i.left<=t.right){const e=t.right-i.left;r.right<e&&(r.right=e)}if(i.right>=t.left&&i.right<=t.right){const e=i.right-t.left;r.left<e&&(r.left=e)}return r},{top:0,right:0,bottom:0,left:0})}};const b=(t,e,i,r,s)=>{let o=t+e,n=e+i;return o>s?(o=s,n=0):o<r&&(o=r,n=0),{position:o,velocity:n}};class x{constructor(t){this.mass=1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.width=25,this.height=25,this.stationary=!1,this.darkMatter=!1,Object.assign(this,t),this.darkMatter||m.masses.push(this)}get dragCoefficient(){return(2*this.width+2*this.height)/this.mass/y}get ax(){return this.stationary?0:p}get ay(){return this.stationary?0:f}get isAgainstTopWall(){return 0===this.y}get isAgainstBottomWall(){return this.y===window.innerHeight-this.height}get isAgainstLeftWall(){return 0===this.x}get isAgainstRightWall(){return this.x===window.innerWidth-this.width}get terminalVelocity(){return 20}get top(){return this.y}get right(){return this.x+this.width}get bottom(){return this.y+this.height}get left(){return this.x}update(){const t=b(this.x,this.dx,this.ax,this.width,window.innerWidth-this.width),e=b(this.y,this.dy,this.ay,this.height,window.innerHeight-this.height);let i=t.position,r=e.position,s=t.velocity,o=e.velocity;const n=m.overlapForMove(this,{x:i,y:r});n.right>0?(i-=n.right,s=0):n.left>0&&(i+=n.left,s=0),n.bottom>0?(r-=n.bottom,o=0):n.top>0&&(r+=n.top,o=0),this.x=i,this.y=r,(this.isAgainstTopWall||this.isAgainstBottomWall||n.top||n.bottom)&&(s=c(s,w)),(this.isAgainstLeftWall||this.isAgainstRightWall||n.left||n.right)&&(o=c(o,w)),this.dx=u(s,-1*this.terminalVelocity,this.terminalVelocity),this.dy=u(o,-1*this.terminalVelocity,this.terminalVelocity)}isHitting(t){return this.right>=t.left&&this.left<=t.right&&this.bottom>=t.top&&this.top<=t.bottom}}var v=new class{constructor(){this.x=0,this.y=0,this.pressed=!1,window.addEventListener("mousedown",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mousemove",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mouseup",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("touchstart",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchmove",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchend",t=>{this.populateFromTouchEvent(t)})}populateFromMouseEvent(t){this.x=t.x,this.y=t.y,this.pressed=1===t.buttons}populateFromTouchEvent(t){const{touches:e}=t;if(0===e.length)this.pressed=!1;else{const t=e[0];this.x=t.clientX,this.y=t.clientY,this.pressed=!0}}};const k=new class extends x{constructor(){super(...arguments),this.width=15,this.height=20,this.jetpackForceX=.4,this.jetpackForceY=1.3}get burning(){return v.pressed}get axJetpack(){if(!this.burning)return 0;const t=v.x-this.x,e=-1*this.width,i=2*this.width;if(d(t,e,i))return 0;const r=this.jetpackForceX/this.mass;return t>0?r:-1*r}get ayJetpack(){if(!this.burning)return 0;const t=v.y-this.y,e=this.height;return t>=0||d(t,0,e)?0:-1*(this.jetpackForceY/this.mass)}get ax(){return super.ax+this.axJetpack}get ay(){return super.ay+this.ayJetpack}get burnerXSide(){return 0===this.axJetpack?"none":this.axJetpack>0?"left":"right"}get burnerYSide(){return 0===this.ayJetpack?"none":this.ayJetpack>0?"top":"bottom"}},E=l(10).map(()=>new x({mass:a(.5,5),x:a(0,window.innerWidth),y:a(0,window.innerHeight),width:a(50,150),height:a(50,150),stationary:!0})),M=l(100).map(()=>{const t=a(1,5);return[a(0,window.innerWidth),a(0,window.innerHeight),t,t]});h(o,()=>{M.forEach((t,e)=>{const i=(e%10+1)/10;o.fillStyle=`rgba(255, 255, 255, ${i})`,o.fillRect(...t)}),E.forEach(t=>{k.isHitting(t)?o.fillStyle="rgba(255, 0, 0, 0.2)":o.fillStyle="rgba(255, 0, 0, 0.5)",o.fillRect(t.x,t.y,t.width,t.height)}),o.fillStyle="rgba(0, 150, 0, 1)",o.fillRect(k.x,k.y,k.width,k.height);const t=k.width/2,e=k.height/5;switch(o.fillStyle="rgba(220, 220, 255, 1)",k.burnerXSide){case"left":o.fillRect(k.x+(k.width-t),k.y+3,t,e);break;case"right":o.fillRect(k.x,k.y+3,t,e);break;default:o.fillRect(k.x+(k.width-t)/2,k.y+3,t,e)}const i=`rgba(255, 100, 0, ${a(.5,.75)})`,r=a(.25,.4)*k.width,s=a(.4,.6)*k.height,n=t=>.6*t,h=t=>(t-n(t))/2;switch(o.fillStyle=i,k.burnerXSide){case"left":o.fillRect(k.x-r,k.y+h(k.height),r,n(k.height));break;case"right":o.fillRect(k.x+k.width,k.y+h(k.height),r,n(k.height))}switch(k.burnerYSide){case"bottom":o.fillRect(k.x+h(k.width),k.y+k.height,n(k.width),s);break;case"top":o.fillRect(k.x+h(k.width),k.y-s,n(k.width),s)}k.update()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,