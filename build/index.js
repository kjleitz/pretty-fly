!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const n=document.createElement("canvas"),r=()=>{n.width=window.innerWidth,n.height=window.innerHeight};r(),window.addEventListener("resize",r),document.body.appendChild(n);const s=n.getContext("2d");s||console.error("Canvas '2d' context is not supported.");const h=(t,e)=>{requestAnimationFrame(()=>h(t,e)),t.clearRect(0,0,window.innerWidth,window.innerHeight),e()};var o=h;const a=0,c=1,l=.25,d=100,u=(t,e)=>{const[i,n]=t<e?[t,e]:[e,t],r=n-i;return i+Math.random()*r},g=(t,e)=>{e||(e=t,t=0);const[i,n]=t<e?[t,e]:[e,t],r=[...Array(n-i).keys()].map(t=>t+i);return e>=t?r:[n,...r.slice(1).reverse()]},w=(t,e,i=0)=>{if(t===i)return i;if(t>i){const n=t-e;return n<i?i:n}const n=t+e;return n>i?i:n},f=(t,e,i)=>{const[n,r]=e<i?[e,i]:[i,e];return t<n?n:t>r?r:t},y=(t,e,i,n=!0)=>{const[r,s]=e<i?[e,i]:[i,e];return n?t>=r&&t<=s:t>r&&t<s},p=(t,e,i,n,r)=>{let s=t+e,h=e+i;return s>r?(s=r,h=0):s<n&&(s=n,h=0),{position:s,velocity:h}};class b{constructor(t){this.mass=1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.width=25,this.height=25,Object.assign(this,t)}get dragCoefficient(){return(2*this.width+2*this.height)/this.mass/d}get ax(){return a}get ay(){return c}get isAgainstTopWall(){return 0===this.y}get isAgainstBottomWall(){return this.y===window.innerHeight-this.height}get isAgainstLeftWall(){return 0===this.x}get isAgainstRightWall(){return this.x===window.innerWidth-this.width}get terminalVelocity(){return 20}update(){const t=p(this.x,this.dx,this.ax,this.width,window.innerWidth-this.width),e=this.isAgainstTopWall||this.isAgainstBottomWall?l:0;this.x=t.position,this.dx=f(w(t.velocity,e),-1*this.terminalVelocity,this.terminalVelocity);const i=p(this.y,this.dy,this.ay,this.height,window.innerHeight-this.height),n=this.isAgainstLeftWall||this.isAgainstRightWall?l:0;this.y=i.position,this.dy=f(w(i.velocity,n),-1*this.terminalVelocity,this.terminalVelocity)}isHitting(t){const e=t.x,i=t.x+t.width,n=t.y,r=t.y+t.height,s=this.x,h=this.x+this.width,o=this.y,a=this.y+this.height;return h>=e&&s<=i&&a>=n&&o<=r}}var x=new class{constructor(){this.latest=new MouseEvent("mousemove"),window.addEventListener("mousemove",t=>{this.latest=t}),window.addEventListener("mousedown",t=>{this.latest=t}),window.addEventListener("mouseup",t=>{this.latest=t})}};const m=new class extends b{constructor(){super(...arguments),this.width=15,this.height=20,this.jetpackForceX=.4,this.jetpackForceY=1.3}get burning(){return 1===x.latest.buttons}get jetpackAccelerationX(){if(!this.burning)return 0;const t=x.latest.x-this.x,e=-1*this.width,i=2*this.width;if(y(t,e,i))return 0;const n=this.jetpackForceX/this.mass;return t>0?n:-1*n}get jetpackAccelerationY(){if(!this.burning)return 0;const t=x.latest.y-this.y,e=this.height;return t>=0||y(t,0,e)?0:-1*(this.jetpackForceY/this.mass)}get ax(){return super.ax+this.jetpackAccelerationX}get ay(){return super.ay+this.jetpackAccelerationY}get burnerXSide(){return 0===this.jetpackAccelerationX?"none":this.jetpackAccelerationX>0?"left":"right"}get burnerYSide(){return 0===this.jetpackAccelerationY?"none":this.jetpackAccelerationY>0?"top":"bottom"}},v=g(10).map(()=>new b({mass:u(.5,5),x:u(0,window.innerWidth),y:u(0,window.innerHeight),width:u(50,150),height:u(50,150)})),j=g(100).map(()=>{const t=u(1,5);return[u(0,window.innerWidth),u(0,window.innerHeight),t,t]});o(s,()=>{j.forEach((t,e)=>{const i=(e%10+1)/10;s.fillStyle=`rgba(255, 255, 255, ${i})`,s.fillRect(...t)}),v.forEach(t=>{m.isHitting(t)?s.fillStyle="rgba(255, 0, 0, 0.2)":s.fillStyle="rgba(255, 0, 0, 0.5)",s.fillRect(t.x,t.y,t.width,t.height)}),s.fillStyle="rgba(0, 150, 0, 1)",s.fillRect(m.x,m.y,m.width,m.height);const t=m.width/2,e=m.height/5;switch(s.fillStyle="rgba(220, 220, 255, 1)",m.burnerXSide){case"left":s.fillRect(m.x+(m.width-t),m.y+3,t,e);break;case"right":s.fillRect(m.x,m.y+3,t,e);break;default:s.fillRect(m.x+(m.width-t)/2,m.y+3,t,e)}const i=`rgba(255, 100, 0, ${u(.5,.75)})`,n=u(.25,.4)*m.width,r=u(.4,.6)*m.height,h=t=>.6*t,o=t=>(t-h(t))/2;switch(s.fillStyle=i,m.burnerXSide){case"left":s.fillRect(m.x-n,m.y+o(m.height),n,h(m.height));break;case"right":s.fillRect(m.x+m.width,m.y+o(m.height),n,h(m.height))}switch(m.burnerYSide){case"bottom":s.fillRect(m.x+o(m.width),m.y+m.height,h(m.width),r);break;case"top":s.fillRect(m.x+o(m.width),m.y-r,h(m.width),r)}m.update()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,