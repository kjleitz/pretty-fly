!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=document.createElement("canvas"),n=()=>{s.width=window.innerWidth,s.height=window.innerHeight};n(),window.addEventListener("resize",n),document.body.appendChild(s);const r=s.getContext("2d");r||console.error("Canvas '2d' context is not supported.");const h=(t,e)=>{requestAnimationFrame(()=>h(t,e)),t.clearRect(0,0,window.innerWidth,window.innerHeight),e()};var o=h;const a=0,l=1,c=.25,d=100;var u=new class{constructor(){this.masses=[]}overlappingMasses(t){return this.masses.filter(e=>t!==e&&t.isHitting(e))}overlap(t){return this.overlappingMasses(t).reduce((e,i)=>{const s=e;if(i.top>=t.top&&i.top<=t.bottom){const e=t.bottom-i.top;s.bottom<e&&(s.bottom=e)}if(i.bottom<=t.bottom&&i.bottom>=t.top){const e=i.bottom-t.top;s.top<e&&(s.top=e)}if(i.left>=t.left&&i.left<=t.right){const e=t.right-i.left;s.right<e&&(s.right=e)}if(i.right>=t.left&&i.right<=t.right){const e=i.right-t.left;s.left<e&&(s.left=e)}return s},{top:0,right:0,bottom:0,left:0})}};const g=(t,e)=>{const[i,s]=t<e?[t,e]:[e,t],n=s-i;return i+Math.random()*n},p=(t,e)=>{e||(e=t,t=0);const[i,s]=t<e?[t,e]:[e,t],n=[...Array(s-i).keys()].map(t=>t+i);return e>=t?n:[s,...n.slice(1).reverse()]},y=(t,e,i=0)=>{if(t===i)return i;if(t>i){const s=t-e;return s<i?i:s}const s=t+e;return s>i?i:s},f=(t,e,i)=>{const[s,n]=e<i?[e,i]:[i,e];return t<s?s:t>n?n:t},w=(t,e,i,s=!0)=>{const[n,r]=e<i?[e,i]:[i,e];return s?t>=n&&t<=r:t>n&&t<r},m=(t,e,i,s,n)=>{let r=t+e,h=e+i;return r>n?(r=n,h=0):r<s&&(r=s,h=0),{position:r,velocity:h}};class x{constructor(t){this.mass=1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.width=25,this.height=25,this.stationary=!1,this.darkMatter=!1,Object.assign(this,t),this.darkMatter||u.masses.push(this)}get dragCoefficient(){return(2*this.width+2*this.height)/this.mass/d}get ax(){return this.stationary?0:a}get ay(){return this.stationary?0:l}get isAgainstTopWall(){return 0===this.y}get isAgainstBottomWall(){return this.y===window.innerHeight-this.height}get isAgainstLeftWall(){return 0===this.x}get isAgainstRightWall(){return this.x===window.innerWidth-this.width}get terminalVelocity(){return 20}get top(){return this.y}get right(){return this.x+this.width}get bottom(){return this.y+this.height}get left(){return this.x}update(){const t=m(this.x,this.dx,this.ax,this.width,window.innerWidth-this.width),e=m(this.y,this.dy,this.ay,this.height,window.innerHeight-this.height);this.x=t.position,this.y=e.position;const i=u.overlap(this),s=this.isAgainstTopWall||this.isAgainstBottomWall||i.top||i.bottom?c:0,n=this.isAgainstLeftWall||this.isAgainstRightWall||i.left||i.right?c:0,r=y(t.velocity,s),h=y(e.velocity,n);this.dx=f(r,-1*this.terminalVelocity,this.terminalVelocity),this.dy=f(h,-1*this.terminalVelocity,this.terminalVelocity),this.dy>0&&i.bottom>0?(this.y-=i.bottom-1,this.dy=0):this.dy<0&&i.top>0?(this.y+=i.top+1,this.dy=0):this.dx>0&&i.right>0?(this.x-=i.right-1,this.dx=0):this.dx<0&&i.left>0&&(this.x+=i.left+1,this.dx=0)}isHitting(t){const e=t.x,i=t.x+t.width,s=t.y,n=t.y+t.height,r=this.x,h=this.x+this.width,o=this.y,a=this.y+this.height;return h>=e&&r<=i&&a>=s&&o<=n}}var b=new class{constructor(){this.x=0,this.y=0,this.pressed=!1,window.addEventListener("mousedown",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mousemove",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mouseup",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("touchstart",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchmove",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchend",t=>{this.populateFromTouchEvent(t)})}populateFromMouseEvent(t){this.x=t.x,this.y=t.y,this.pressed=1===t.buttons}populateFromTouchEvent(t){const{touches:e}=t;if(0===e.length)this.pressed=!1;else{const t=e[0];this.x=t.clientX,this.y=t.clientY,this.pressed=!0}}};const v=new class extends x{constructor(){super(...arguments),this.width=15,this.height=20,this.jetpackForceX=.4,this.jetpackForceY=1.3}get burning(){return b.pressed}get axJetpack(){if(!this.burning)return 0;const t=b.x-this.x,e=-1*this.width,i=2*this.width;if(w(t,e,i))return 0;const s=this.jetpackForceX/this.mass;return t>0?s:-1*s}get ayJetpack(){if(!this.burning)return 0;const t=b.y-this.y,e=this.height;return t>=0||w(t,0,e)?0:-1*(this.jetpackForceY/this.mass)}get ax(){return super.ax+this.axJetpack}get ay(){return super.ay+this.ayJetpack}get burnerXSide(){return 0===this.axJetpack?"none":this.axJetpack>0?"left":"right"}get burnerYSide(){return 0===this.ayJetpack?"none":this.ayJetpack>0?"top":"bottom"}},k=p(10).map(()=>new x({mass:g(.5,5),x:g(0,window.innerWidth),y:g(0,window.innerHeight),width:g(50,150),height:g(50,150),stationary:!0})),E=p(100).map(()=>{const t=g(1,5);return[g(0,window.innerWidth),g(0,window.innerHeight),t,t]});o(r,()=>{E.forEach((t,e)=>{const i=(e%10+1)/10;r.fillStyle=`rgba(255, 255, 255, ${i})`,r.fillRect(...t)}),k.forEach(t=>{v.isHitting(t)?r.fillStyle="rgba(255, 0, 0, 0.2)":r.fillStyle="rgba(255, 0, 0, 0.5)",r.fillRect(t.x,t.y,t.width,t.height)}),r.fillStyle="rgba(0, 150, 0, 1)",r.fillRect(v.x,v.y,v.width,v.height);const t=v.width/2,e=v.height/5;switch(r.fillStyle="rgba(220, 220, 255, 1)",v.burnerXSide){case"left":r.fillRect(v.x+(v.width-t),v.y+3,t,e);break;case"right":r.fillRect(v.x,v.y+3,t,e);break;default:r.fillRect(v.x+(v.width-t)/2,v.y+3,t,e)}const i=`rgba(255, 100, 0, ${g(.5,.75)})`,s=g(.25,.4)*v.width,n=g(.4,.6)*v.height,h=t=>.6*t,o=t=>(t-h(t))/2;switch(r.fillStyle=i,v.burnerXSide){case"left":r.fillRect(v.x-s,v.y+o(v.height),s,h(v.height));break;case"right":r.fillRect(v.x+v.width,v.y+o(v.height),s,h(v.height))}switch(v.burnerYSide){case"bottom":r.fillRect(v.x+o(v.width),v.y+v.height,h(v.width),n);break;case"top":r.fillRect(v.x+o(v.width),v.y-n,h(v.width),n)}v.update()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,