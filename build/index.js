!function(t){var e={};function i(o){if(e[o])return e[o].exports;var s=e[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,o){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(o,s,function(e){return t[e]}.bind(null,s));return o},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const o=document.createElement("canvas"),s=()=>{o.width=window.innerWidth,o.height=window.innerHeight};s(),window.addEventListener("resize",s),document.body.appendChild(o);const r=o.getContext("2d");r||console.error("Canvas '2d' context is not supported.");const n=(t,e)=>{requestAnimationFrame(()=>n(t,e)),t.clearRect(0,0,window.innerWidth,window.innerHeight),e()};var h=n;const l=(t,e)=>{const[i,o]=t<e?[t,e]:[e,t],s=o-i;return i+Math.random()*s},a=(t,e)=>{e||(e=t,t=0);const[i,o]=t<e?[t,e]:[e,t],s=[...Array(o-i).keys()].map(t=>t+i);return e>=t?s:[o,...s.slice(1).reverse()]},c=(t,e,i=0)=>{if(t===i)return i;if(t>i){const o=t-e;return o<i?i:o}const o=t+e;return o>i?i:o},u=(t,e,i)=>{const[o,s]=e<i?[e,i]:[i,e];return t<o?o:t>s?s:t},d=(t,e,i,o=!0)=>{const[s,r]=e<i?[e,i]:[i,e];return o?t>=s&&t<=r:t>s&&t<r},g=(t,e)=>Math.abs(t-e),p=0,f=1,y=.25,m=100;var w=new class{constructor(){this.masses=[]}overlapForMove(t,e){const i=new x(Object.assign(Object.assign(Object.assign({},t),e),{darkMatter:!0})),o=i.x-t.x,s=i.y-t.y,r=s<0,n=s>0,h=o<0,l=o>0;return this.masses.reduce((e,o)=>{if(o===t)return e;if(!i.isHitting(o))return e;const s=o.solid?e.solid:e.ephemeral;if(r&&d(o.bottom,t.top,i.top)){const t=g(o.bottom,i.top);s.top<t&&(s.top=t)}if(n&&d(o.top,t.bottom,i.bottom)){const t=g(o.top,i.bottom);s.bottom<t&&(s.bottom=t)}if(h&&d(o.right,t.left,i.left)){const t=g(o.right,i.left);s.left<t&&(s.left=t)}if(l&&d(o.left,t.right,i.right)){const t=g(o.left,i.right);s.right<t&&(s.right=t)}return e},{solid:{top:0,bottom:0,left:0,right:0},ephemeral:{top:0,bottom:0,left:0,right:0}})}overlappingMasses(t,{ignore:e=[]}={}){return this.masses.filter(i=>t!==i&&!e.includes(i)&&t.isHitting(i))}overlap(t,{ignore:e=[]}={}){return this.overlappingMasses(t,{ignore:e}).reduce((e,i)=>{const o=e;if(i.top>=t.top&&i.top<=t.bottom){const e=t.bottom-i.top;o.bottom<e&&(o.bottom=e)}if(i.bottom<=t.bottom&&i.bottom>=t.top){const e=i.bottom-t.top;o.top<e&&(o.top=e)}if(i.left>=t.left&&i.left<=t.right){const e=t.right-i.left;o.right<e&&(o.right=e)}if(i.right>=t.left&&i.right<=t.right){const e=i.right-t.left;o.left<e&&(o.left=e)}return o},{top:0,right:0,bottom:0,left:0})}};const b=(t,e,i,o,s)=>{let r=t+e,n=e+i;return r>s?(r=s,n=0):r<o&&(r=o,n=0),{position:r,velocity:n}};class x{constructor(t){this.mass=1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.width=25,this.height=25,this.stationary=!1,this.darkMatter=!1,this.solid=!0,this.collectOnTouch=!1,this.touchedAt=null,Object.assign(this,t),this.darkMatter||w.masses.push(this)}get dragCoefficient(){return(2*this.width+2*this.height)/this.mass/m}get ax(){return this.stationary?0:p}get ay(){return this.stationary?0:f}get isAgainstTopWall(){return 0===this.y}get isAgainstBottomWall(){return this.y===window.innerHeight-this.height}get isAgainstLeftWall(){return 0===this.x}get isAgainstRightWall(){return this.x===window.innerWidth-this.width}get terminalVelocity(){return 20}get top(){return this.y}get right(){return this.x+this.width}get bottom(){return this.y+this.height}get left(){return this.x}update(){const t=b(this.x,this.dx,this.ax,this.width,window.innerWidth-this.width),e=b(this.y,this.dy,this.ay,this.height,window.innerHeight-this.height);let i=t.position,o=e.position,s=t.velocity,r=e.velocity;const n=w.overlapForMove(this,{x:i,y:o}).solid;n.right>0?(i-=n.right,s=0):n.left>0&&(i+=n.left,s=0),n.bottom>0?(o-=n.bottom,r=0):n.top>0&&(o+=n.top,r=0),this.x=i,this.y=o,(this.isAgainstTopWall||this.isAgainstBottomWall||n.top||n.bottom)&&(s=c(s,y)),(this.isAgainstLeftWall||this.isAgainstRightWall||n.left||n.right)&&(r=c(r,y)),this.dx=u(s,-1*this.terminalVelocity,this.terminalVelocity),this.dy=u(r,-1*this.terminalVelocity,this.terminalVelocity)}isHitting(t){return this.right>=t.left&&this.left<=t.right&&this.bottom>=t.top&&this.top<=t.bottom}}var v=new class{constructor(){this.x=0,this.y=0,this.pressed=!1,window.addEventListener("mousedown",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mousemove",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mouseup",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("touchstart",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchmove",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchend",t=>{this.populateFromTouchEvent(t)})}populateFromMouseEvent(t){this.x=t.x,this.y=t.y,this.pressed=1===t.buttons}populateFromTouchEvent(t){const{touches:e}=t;if(0===e.length)this.pressed=!1;else{const t=e[0];this.x=t.clientX,this.y=t.clientY,this.pressed=!0}}};const k=window.innerWidth,E=window.innerHeight,M=new class extends x{constructor(){super(...arguments),this.width=15,this.height=20,this.jetpackForceX=.4,this.jetpackForceY=1.3}get burning(){return v.pressed}get axJetpack(){if(!this.burning)return 0;const t=v.x-this.x,e=-1*this.width,i=2*this.width;if(d(t,e,i))return 0;const o=this.jetpackForceX/this.mass;return t>0?o:-1*o}get ayJetpack(){if(!this.burning)return 0;const t=v.y-this.y,e=this.height;return t>=0||d(t,0,e)?0:-1*(this.jetpackForceY/this.mass)}get ax(){return super.ax+this.axJetpack}get ay(){return super.ay+this.ayJetpack}get burnerXSide(){return 0===this.axJetpack?"none":this.axJetpack>0?"left":"right"}get burnerYSide(){return 0===this.ayJetpack?"none":this.ayJetpack>0?"top":"bottom"}},S=a(10).map(()=>new x({x:l(0,k),y:l(0,E),width:l(50,150),height:l(50,150),stationary:!0})),F=a(10).map(()=>new x({mass:l(.5,5),x:l(0,k),y:l(0,E),width:25,height:25,solid:!1,stationary:Math.random()>.5,collectOnTouch:!0})),j=[...S,...F],A=[M,...j.filter(t=>!t.stationary)];let O=0;const T=F.length,R=a(100).map(()=>{const t=l(1,5);return[l(0,k),l(0,E),t,t]});h(r,()=>{R.forEach((t,e)=>{const i=(e%10+1)/10;r.fillStyle=`rgba(255, 255, 255, ${i})`,r.fillRect(...t)}),j.forEach((t,e)=>{const i=M.isHitting(t);let o=!0;if(t.solid)r.fillStyle="rgba(255, 0, 0, 0.7)";else if(i&&!t.touchedAt)r.fillStyle="rgba(0, 0, 255, 0.8)",t.touchedAt=(new Date).getTime();else if(t.collectOnTouch&&t.touchedAt){const i=(new Date).getTime()-t.touchedAt;if(i>200)j.splice(e,1),o=!1,O+=1;else{const t=Math.ceil(i/200*255);r.fillStyle=`rgba(${t}, ${t}, 255, 0.8)`}}else r.fillStyle="rgba(0, 100, 255, 0.8)";o&&r.fillRect(t.x,t.y,t.width,t.height)}),r.fillStyle="rgba(0, 150, 0, 1)",r.fillRect(M.x,M.y,M.width,M.height);const t=M.width/2,e=M.height/5;switch(r.fillStyle="rgba(220, 220, 255, 1)",M.burnerXSide){case"left":r.fillRect(M.x+(M.width-t),M.y+3,t,e);break;case"right":r.fillRect(M.x,M.y+3,t,e);break;default:r.fillRect(M.x+(M.width-t)/2,M.y+3,t,e)}const i=`rgba(255, 100, 0, ${l(.5,.75)})`,o=l(.25,.4)*M.width,s=l(.4,.6)*M.height,n=t=>.6*t,h=t=>(t-n(t))/2;switch(r.fillStyle=i,M.burnerXSide){case"left":r.fillRect(M.x-o,M.y+h(M.height),o,n(M.height));break;case"right":r.fillRect(M.x+M.width,M.y+h(M.height),o,n(M.height))}switch(M.burnerYSide){case"bottom":r.fillRect(M.x+h(M.width),M.y+M.height,n(M.width),s);break;case"top":r.fillRect(M.x+h(M.width),M.y-s,n(M.width),s)}r.font="30px Courier",r.fillStyle="#FFF";const a=`${O}/${T}${O===T?" aww yee":""}`;r.fillText(a,50,50),A.forEach(t=>t.update())})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,