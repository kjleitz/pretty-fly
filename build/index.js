!function(t){var e={};function i(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(s,o,function(e){return t[e]}.bind(null,o));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=document.createElement("canvas"),o=()=>{s.width=window.innerWidth,s.height=window.innerHeight};o(),window.addEventListener("resize",o),document.body.appendChild(s);const r=s.getContext("2d");r||console.error("Canvas '2d' context is not supported.");let n=0;const h=(t,e)=>{requestAnimationFrame(()=>h(t,e)),t.clearRect(0,0,window.innerWidth,window.innerHeight),e(n),n+=1};var l=h;const a=(t,e)=>{const[i,s]=t<e?[t,e]:[e,t],o=s-i;return i+Math.random()*o};function c(t,...e){const i="number"==typeof e[0]?e[0]:0,s="function"==typeof e[0]?e[0]:e[1],[o,r]=t<i?[t,i]:[i,t];return[...Array(r-o).keys()].map(t=>s?s(t+o):t+o)}c(10),c(0,10),c(0,t=>t.toString()),c(0,10,t=>t.toString());window.range=c;const u=(t,e,i=0)=>{if(t===i)return i;if(t>i){const s=t-e;return s<i?i:s}const s=t+e;return s>i?i:s},g=(t,e,i)=>{const[s,o]=e<i?[e,i]:[i,e];return t<s?s:t>o?o:t},d=(t,e,i,s=!0)=>{const[o,r]=e<i?[e,i]:[i,e];return s?t>=o&&t<=r:t>o&&t<r},f=(t,e)=>Math.abs(t-e),p=0,y=1,m=.25,w=100;var b=new class{constructor(){this.masses=[]}collisionsForMove(t,e){const i=new v(Object.assign(Object.assign(Object.assign({},t),e),{darkMatter:!0})),s=i.x-t.x,o=i.y-t.y,r=o<0,n=o>0,h=s<0,l=s>0;return this.masses.reduce((e,s)=>{if(s===t)return e;if(!i.isHitting(s))return e;const o=s.solid?e.solid:e.ephemeral;if(r&&d(s.bottom,t.top,i.top)){const t=f(s.bottom,i.top);o.top<t&&(o.top=t)}if(n&&d(s.top,t.bottom,i.bottom)){const t=f(s.top,i.bottom);o.bottom<t&&(o.bottom=t)}if(h&&d(s.right,t.left,i.left)){const t=f(s.right,i.left);o.left<t&&(o.left=t)}if(l&&d(s.left,t.right,i.right)){const t=f(s.left,i.right);o.right<t&&(o.right=t)}return e},{solid:{top:0,bottom:0,left:0,right:0},ephemeral:{top:0,bottom:0,left:0,right:0}})}overlappingMasses(t,{ignore:e=[]}={}){return this.masses.filter(i=>t!==i&&!e.includes(i)&&t.isHitting(i))}overlap(t,{ignore:e=[]}={}){return this.overlappingMasses(t,{ignore:e}).reduce((e,i)=>{const s=e;if(i.top>=t.top&&i.top<=t.bottom){const e=t.bottom-i.top;s.bottom<e&&(s.bottom=e)}if(i.bottom<=t.bottom&&i.bottom>=t.top){const e=i.bottom-t.top;s.top<e&&(s.top=e)}if(i.left>=t.left&&i.left<=t.right){const e=t.right-i.left;s.right<e&&(s.right=e)}if(i.right>=t.left&&i.right<=t.right){const e=i.right-t.left;s.left<e&&(s.left=e)}return s},{top:0,right:0,bottom:0,left:0})}};const x=(t,e,i,s,o)=>{let r=t+e,n=e+i;return r>o?(r=o,n=0):r<s&&(r=s,n=0),{position:r,velocity:n}};class v{constructor(t){this.mass=1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.width=25,this.height=25,this.stationary=!1,this.darkMatter=!1,this.solid=!0,this.collectOnTouch=!1,this.touchedAt=null,Object.assign(this,t),this.darkMatter||b.masses.push(this)}get dragCoefficient(){return(2*this.width+2*this.height)/this.mass/w}get ax(){return this.stationary?0:p}get ay(){return this.stationary?0:y}get isAgainstTopWall(){return 0===this.y}get isAgainstBottomWall(){return this.y===window.innerHeight-this.height}get isAgainstLeftWall(){return 0===this.x}get isAgainstRightWall(){return this.x===window.innerWidth-this.width}get terminalVelocity(){return 20}get top(){return this.y}get right(){return this.x+this.width}get bottom(){return this.y+this.height}get left(){return this.x}update(){const t=x(this.x,this.dx,this.ax,this.width,window.innerWidth-this.width),e=x(this.y,this.dy,this.ay,this.height,window.innerHeight-this.height);let i=t.position,s=e.position,o=t.velocity,r=e.velocity;const n=b.collisionsForMove(this,{x:i,y:s}).solid;n.right>0?(i-=n.right,o=0):n.left>0&&(i+=n.left,o=0),n.bottom>0?(s-=n.bottom,r=0):n.top>0&&(s+=n.top,r=0),this.x=i,this.y=s,(this.isAgainstTopWall||this.isAgainstBottomWall||n.top||n.bottom)&&(o=u(o,m)),(this.isAgainstLeftWall||this.isAgainstRightWall||n.left||n.right)&&(r=u(r,m)),this.dx=g(o,-1*this.terminalVelocity,this.terminalVelocity),this.dy=g(r,-1*this.terminalVelocity,this.terminalVelocity)}isHitting(t){return this.right>=t.left&&this.left<=t.right&&this.bottom>=t.top&&this.top<=t.bottom}}var E=new class{constructor(){this.x=0,this.y=0,this.pressed=!1,window.addEventListener("mousedown",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mousemove",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("mouseup",t=>{this.populateFromMouseEvent(t)}),window.addEventListener("touchstart",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchmove",t=>{this.populateFromTouchEvent(t)}),window.addEventListener("touchend",t=>{this.populateFromTouchEvent(t)})}populateFromMouseEvent(t){this.x=t.x,this.y=t.y,this.pressed=1===t.buttons}populateFromTouchEvent(t){const{touches:e}=t;if(0===e.length)this.pressed=!1;else{const t=e[0];this.x=t.clientX,this.y=t.clientY,this.pressed=!0}}};class M{constructor(t,e,{size:i,brightness:s,vector:o}={}){this.x=t,this.y=e,this.size=i||a(1,5);const r=void 0===s?Math.random():s;this.brightness=g(r,0,1),this.vector=o||[-1,1]}}const F=window.innerWidth,R=window.innerHeight,A=new class extends v{constructor(){super(...arguments),this.width=15,this.height=20,this.jetpackForceX=.4,this.jetpackForceY=1.3,this.MAX_FUEL=100,this.MIN_FUEL=0,this.MAX_FUEL_RECHARGE=25,this.fuelRechargeRate=.1,this.fuelRechargeDelay=200,this.lastBurn=null,this._fuel=100}get burning(){return this.fuel>0&&E.pressed}get axJetpack(){if(!this.burning)return 0;const t=E.x-this.x,e=-1*this.width,i=2*this.width;if(d(t,e,i))return 0;const s=this.jetpackForceX/this.mass;return t>0?s:-1*s}get ayJetpack(){if(!this.burning)return 0;const t=E.y-this.y,e=this.height;return t>=0||d(t,0,e)?0:-1*(this.jetpackForceY/this.mass)}get ax(){return super.ax+this.axJetpack}get ay(){return super.ay+this.ayJetpack}get burnerXSide(){return 0===this.axJetpack?"none":this.axJetpack>0?"left":"right"}get burnerYSide(){return 0===this.ayJetpack?"none":this.ayJetpack>0?"top":"bottom"}set fuel(t){this._fuel=g(t,this.MIN_FUEL,this.MAX_FUEL)}get fuel(){return this._fuel}update(){super.update(),this.burning?(this.fuel-=.5,this.lastBurn=new Date):this.fuel<this.MAX_FUEL_RECHARGE&&this.lastBurn&&(new Date).getTime()-this.lastBurn.getTime()>this.fuelRechargeDelay&&(this.fuel=g(this.fuel+this.fuelRechargeRate,this.MIN_FUEL,this.MAX_FUEL))}},S=c(10).map(()=>new v({x:a(0,F),y:a(0,R),width:a(50,150),height:a(50,150),stationary:!0})),_=c(10).map(()=>new v({mass:a(.5,5),x:a(0,F),y:a(0,R),width:25,height:25,solid:!1,stationary:!1,collectOnTouch:!0})),k=[...S,..._],L=[A,...k.filter(t=>!t.stationary)];let T=0;const j=_.length,O=c(100,()=>new M(a(0,F),a(0,R))),W=[];setInterval(()=>{const[t,e]=Math.random()>.5?[a(250,F),0]:[F,a(0,R-250)];W.push(new M(t,e,{brightness:1,vector:[-10,10]}))},2e3),l(r,t=>{O.forEach((e,i)=>{const{x:s,y:o,size:n,brightness:h,vector:l}=e,c=h-Math.random();if(r.fillStyle=`rgba(255, 255, 255, ${(t+i)%20==0?c:h})`,r.fillRect(s,o,n,n),e.x+=l[0],e.y+=l[1],e.x<0||e.x>F||e.y<0||e.y>R){const[t,i]=Math.random()>.5?[a(0,F),0]:[F,a(0,R)];e.x=t,e.y=i}}),W.forEach((t,e)=>{const{x:i,y:s,size:o,brightness:n,vector:h}=t;r.fillStyle=`rgba(255, 255, 255, ${n})`,r.fillRect(i,s,o,o),t.x+=h[0],t.y+=h[1],(t.x<0||t.x>F||t.y<0||t.y>R)&&W.splice(e,1)}),k.forEach((t,e)=>{const i=A.isHitting(t);let s=!0;if(t.solid)r.fillStyle="rgba(255, 0, 0, 0.7)";else if(i&&!t.touchedAt)r.fillStyle="rgba(0, 0, 255, 0.8)",t.touchedAt=(new Date).getTime(),A.fuel+=.25*A.MAX_FUEL;else if(t.collectOnTouch&&t.touchedAt){const i=(new Date).getTime()-t.touchedAt;if(i>200)k.splice(e,1),s=!1,T+=1;else{const t=Math.ceil(i/200*255);r.fillStyle=`rgba(${t}, ${t}, 255, 0.8)`}}else r.fillStyle="rgba(0, 100, 255, 0.8)";s&&r.fillRect(t.x,t.y,t.width,t.height)}),r.fillStyle="rgba(0, 150, 0, 1)",r.fillRect(A.x,A.y,A.width,A.height);const e=A.width/2,i=A.height/5;switch(r.fillStyle="rgba(220, 220, 255, 1)",A.burnerXSide){case"left":r.fillRect(A.x+(A.width-e),A.y+3,e,i);break;case"right":r.fillRect(A.x,A.y+3,e,i);break;default:r.fillRect(A.x+(A.width-e)/2,A.y+3,e,i)}const s=`rgba(255, 100, 0, ${a(.5,.75)})`,o=a(.25,.4)*A.width,n=a(.4,.6)*A.height,h=t=>.6*t,l=t=>(t-h(t))/2;switch(r.fillStyle=s,A.burnerXSide){case"left":r.fillRect(A.x-o,A.y+l(A.height),o,h(A.height));break;case"right":r.fillRect(A.x+A.width,A.y+l(A.height),o,h(A.height))}switch(A.burnerYSide){case"bottom":r.fillRect(A.x+l(A.width),A.y+A.height,h(A.width),n);break;case"top":r.fillRect(A.x+l(A.width),A.y-n,h(A.width),n)}r.font="30px Courier",r.fillStyle="#FFF";const c=`${T}/${j}${T===j?" aww yee":""}`;r.fillText(c,50,50);const u=A.fuel/A.MAX_FUEL,g=300*u,d=u<.25&&t%20>10;r.fillStyle=d?"rgba(255, 0, 0, 0.6)":"rgba(255, 0, 0, 0.3)",r.fillRect(50+g,60,300-g,30),r.fillStyle="rgba(0, 255, 0, 0.5)",r.fillRect(50,60,g,30),L.forEach(t=>t.update())})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,